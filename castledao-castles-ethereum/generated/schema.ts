// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Castle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Castle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Castle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Castle", id.toString(), this);
    }
  }

  static load(id: string): Castle | null {
    return changetype<Castle | null>(store.get("Castle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get mintTime(): BigInt {
    let value = this.get("mintTime");
    return value!.toBigInt();
  }

  set mintTime(value: BigInt) {
    this.set("mintTime", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value!.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get defense(): BigInt {
    let value = this.get("defense");
    return value!.toBigInt();
  }

  set defense(value: BigInt) {
    this.set("defense", Value.fromBigInt(value));
  }

  get rarity(): string {
    let value = this.get("rarity");
    return value!.toString();
  }

  set rarity(value: string) {
    this.set("rarity", Value.fromString(value));
  }

  get capacity(): BigInt {
    let value = this.get("capacity");
    return value!.toBigInt();
  }

  set capacity(value: BigInt) {
    this.set("capacity", Value.fromBigInt(value));
  }

  get warrior(): string {
    let value = this.get("warrior");
    return value!.toString();
  }

  set warrior(value: string) {
    this.set("warrior", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get goldGeneration(): BigInt {
    let value = this.get("goldGeneration");
    return value!.toBigInt();
  }

  set goldGeneration(value: BigInt) {
    this.set("goldGeneration", Value.fromBigInt(value));
  }

  get castleType(): string {
    let value = this.get("castleType");
    return value!.toString();
  }

  set castleType(value: string) {
    this.set("castleType", Value.fromString(value));
  }

  get rarityNumber(): BigInt {
    let value = this.get("rarityNumber");
    return value!.toBigInt();
  }

  set rarityNumber(value: BigInt) {
    this.set("rarityNumber", Value.fromBigInt(value));
  }

  get skillType(): string {
    let value = this.get("skillType");
    return value!.toString();
  }

  set skillType(value: string) {
    this.set("skillType", Value.fromString(value));
  }

  get skillAmount(): BigInt {
    let value = this.get("skillAmount");
    return value!.toBigInt();
  }

  set skillAmount(value: BigInt) {
    this.set("skillAmount", Value.fromBigInt(value));
  }

  get warriorName(): string {
    let value = this.get("warriorName");
    return value!.toString();
  }

  set warriorName(value: string) {
    this.set("warriorName", Value.fromString(value));
  }
}

export class All extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save All entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type All must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("All", id.toString(), this);
    }
  }

  static load(id: string): All | null {
    return changetype<All | null>(store.get("All", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numTokens(): BigInt {
    let value = this.get("numTokens");
    return value!.toBigInt();
  }

  set numTokens(value: BigInt) {
    this.set("numTokens", Value.fromBigInt(value));
  }

  get numOwners(): BigInt {
    let value = this.get("numOwners");
    return value!.toBigInt();
  }

  set numOwners(value: BigInt) {
    this.set("numOwners", Value.fromBigInt(value));
  }

  get minted(): Array<BigInt> {
    let value = this.get("minted");
    return value!.toBigIntArray();
  }

  set minted(value: Array<BigInt>) {
    this.set("minted", Value.fromBigIntArray(value));
  }

  get burned(): Array<BigInt> {
    let value = this.get("burned");
    return value!.toBigIntArray();
  }

  set burned(value: Array<BigInt>) {
    this.set("burned", Value.fromBigIntArray(value));
  }
}

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Owner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Owner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Owner", id.toString(), this);
    }
  }

  static load(id: string): Owner | null {
    return changetype<Owner | null>(store.get("Owner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get numTokens(): BigInt {
    let value = this.get("numTokens");
    return value!.toBigInt();
  }

  set numTokens(value: BigInt) {
    this.set("numTokens", Value.fromBigInt(value));
  }
}

export class ContractApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContractApproval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContractApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContractApproval", id.toString(), this);
    }
  }

  static load(id: string): ContractApproval | null {
    return changetype<ContractApproval | null>(
      store.get("ContractApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}
